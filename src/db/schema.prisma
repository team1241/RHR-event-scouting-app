// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Team {
  THEORY
  BANG
  BIRDS
}

enum FieldImageType {
  FULL_FIELD
  RED_HALF
  BLUE_HALF
  FULL_FIELD_FLIPPED
  RED_HALF_FLIPPED
  BLUE_HALF_FLIPPED
}

model Users {
  id               Int       @id @default(autoincrement())
  clerkId          String    @unique
  firstName        String?
  lastName         String?
  grade            String?
  team             Team?
  isActive         Boolean   @default(true)
  isAdmin          Boolean   @default(false)
  isSignupComplete Boolean   @default(false)
  createdAt        String
  updatedAt        String
  Actions          Actions[]

  AlternateScoutData AlternateScoutData[]
  MatchComments      MatchComments[]
}

model Seasons {
  id          Int           @id @default(autoincrement())
  year        Int
  gameName    String
  isActive    Boolean       @default(false)
  events      Events[]
  createdAt   String
  updatedAt   String
  fieldImages FieldImages[]

  PitScoutImages PitScoutImages[]
}

model FieldImages {
  id        Int            @id @default(autoincrement())
  season    Seasons        @relation(fields: [seasonId], references: [id])
  seasonId  Int
  type      FieldImageType
  imageUrl  String
  createdAt String
  updatedAt String

  @@unique([seasonId, type])
}

model PitScouting {
  id                  Int    @id @default(autoincrement())
  event               Events @relation(fields: [eventId], references: [id])
  eventId             Int
  teamNumber          Int
  length              String
  width               String
  weight              String
  driveBase           String
  gamepieceIntake     String
  autonomous          String
  teleop              String
  endgame             String
  gameSpecificJson    String
  driveteamExperience String
  generalComments     String
  createdAt           String

  @@unique([eventId, teamNumber])
}

model PitScoutImages {
  id         Int      @id @default(autoincrement())
  season     Seasons  @relation(fields: [seasonId], references: [id])
  seasonId   Int
  imageUrls  String[]
  teamNumber Int

  @@unique([seasonId, teamNumber])
}

model Events {
  id                Int                 @id @default(autoincrement())
  season            Seasons             @relation(fields: [seasonId], references: [id])
  seasonId          Int
  name              String
  venue             String?
  eventType         String
  eventKey          String
  districtKey       String?
  startDate         String
  endDate           String
  createdAt         String
  updatedAt         String
  actions           Actions[]
  startingPositions StartingPositions[]

  AlternateScoutData AlternateScoutData[]
  MatchComments      MatchComments[]
  MatchSchedule      MatchSchedule[]
  PitScouting        PitScouting[]
}

model StartingPositions {
  id               Int     @id @default(autoincrement())
  event            Events  @relation(fields: [eventId], references: [id])
  eventId          Int
  scouterId        String
  matchNumber      String
  teamNumber       Int
  startingPosition String
  hasPreload       Boolean
  showedUp         Boolean
  timestamp        String

  @@unique([eventId, matchNumber, teamNumber])
}

model Actions {
  id          Int      @id @default(autoincrement())
  isAuto      Boolean
  hasUndo     Boolean?
  wasDefended Boolean?
  event       Events   @relation(fields: [eventId], references: [id])
  eventId     Int
  scout       Users    @relation(fields: [scoutId], references: [id])
  scoutId     Int
  matchNumber String
  teamNumber  Int
  actionName  String
  gamePiece   String
  location    String
  timestamp   String
}

model AlternateScoutData {
  id          Int    @id @default(autoincrement())
  event       Events @relation(fields: [eventId], references: [id])
  eventId     Int
  scout       Users  @relation(fields: [scoutId], references: [id])
  scoutId     Int
  matchNumber String
  dataJSON    String
  timestamp   String

  @@unique([eventId, matchNumber])
}

model MatchComments {
  id          Int    @id @default(autoincrement())
  event       Events @relation(fields: [eventId], references: [id])
  eventId     Int
  scout       Users  @relation(fields: [scoutId], references: [id])
  scoutId     Int
  teamNumber  Int
  matchNumber String
  comment     String
  timestamp   String

  @@unique([eventId, matchNumber, teamNumber])
}

model MatchSchedule {
  id            Int    @id @default(autoincrement())
  event         Events @relation(fields: [eventId], references: [id])
  eventId       Int
  matchNumber   String
  teamNumber    Int
  driverStation Int
  colour        String
}
